
// Generated from D:/Documents/Code/C++/compiler/frontend\SysY.g4 by ANTLR 4.10.1


#include "SysYLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SysYLexerStaticData final {
  SysYLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SysYLexerStaticData(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData(SysYLexerStaticData&&) = delete;
  SysYLexerStaticData& operator=(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData& operator=(SysYLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag sysylexerLexerOnceFlag;
SysYLexerStaticData *sysylexerLexerStaticData = nullptr;

void sysylexerLexerInitialize() {
  assert(sysylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SysYLexerStaticData>(
    std::vector<std::string>{
      "Decl", "ConstDecl", "BType", "ConstDef", "ConstInitVal", "VarDecl", 
      "VarDef", "InitVal", "FuncDef", "FuncType", "FuncFParams", "FuncFParam", 
      "Block", "BlockItem", "Stmt", "Exp", "Cond", "LVal", "PrimaryExp", 
      "Number", "UnaryExp", "UnaryOp", "FuncRParams", "MulExp", "AddExp", 
      "RelExp", "EqExp", "LAndExp", "LOrExp", "ConstExp", "INT", "FLOAT", 
      "VOID", "RETURN", "IF", "ELSE", "DO", "WHILE", "FOR", "BREAK", "CONTINUE", 
      "CONST", "EQU", "NEQ", "AND", "OR", "LEQ", "GEQ", "PLUS", "MINUS", 
      "TIMES", "SLASH", "MOD", "LT", "GT", "COLON", "SEMICOLON", "LNOT", 
      "BNOT", "COMMA", "DOT", "ASSIGN", "QUESTION", "LPAREN", "RPAREN", 
      "LBRACK", "RBRACK", "LBRACE", "RBRACE", "FLOATNUM", "INTEGER", "IDENTIFIER", 
      "STRING", "ESC", "WS", "LINE_COMMENT", "COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'int'", "'float'", 
      "'void'", "'return'", "'if'", "'else'", "'do'", "'while'", "'for'", 
      "'break'", "'continue'", "'const'", "'=='", "'!='", "'&&'", "'||'", 
      "'<='", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", "':'", 
      "';'", "'!'", "'~'", "','", "'.'", "'='", "'\\u003F'", "'('", "')'", 
      "'['", "']'", "'{'", "'}'"
    },
    std::vector<std::string>{
      "", "Decl", "ConstDecl", "BType", "ConstDef", "ConstInitVal", "VarDecl", 
      "VarDef", "InitVal", "FuncDef", "FuncType", "FuncFParams", "FuncFParam", 
      "Block", "BlockItem", "Stmt", "Exp", "Cond", "LVal", "PrimaryExp", 
      "Number", "UnaryExp", "UnaryOp", "FuncRParams", "MulExp", "AddExp", 
      "RelExp", "EqExp", "LAndExp", "LOrExp", "ConstExp", "INT", "FLOAT", 
      "VOID", "RETURN", "IF", "ELSE", "DO", "WHILE", "FOR", "BREAK", "CONTINUE", 
      "CONST", "EQU", "NEQ", "AND", "OR", "LEQ", "GEQ", "PLUS", "MINUS", 
      "TIMES", "SLASH", "MOD", "LT", "GT", "COLON", "SEMICOLON", "LNOT", 
      "BNOT", "COMMA", "DOT", "ASSIGN", "QUESTION", "LPAREN", "RPAREN", 
      "LBRACK", "RBRACK", "LBRACE", "RBRACE", "FLOATNUM", "INTEGER", "IDENTIFIER", 
      "STRING", "ESC", "WS", "LINE_COMMENT", "COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,77,612,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,1,0,
  	1,0,3,0,158,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  	2,1,2,3,2,175,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
  	1,4,1,4,1,4,3,4,193,8,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
  	6,1,6,3,6,208,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,217,8,7,1,8,1,8,1,8,
  	1,8,1,8,1,8,1,8,1,9,1,9,1,9,3,9,229,8,9,1,10,1,10,1,10,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,11,1,11,1,12,1,12,5,12,244,8,12,10,12,12,12,247,9,12,
  	1,12,1,12,1,13,1,13,3,13,253,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,316,
  	8,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
  	1,18,1,18,3,18,333,8,18,1,19,1,19,3,19,337,8,19,1,20,1,20,1,20,1,20,1,
  	20,1,20,1,20,1,20,1,20,3,20,348,8,20,1,21,1,21,1,22,1,22,1,22,1,23,1,
  	23,1,23,1,23,1,23,3,23,360,8,23,1,24,1,24,1,24,1,24,1,24,3,24,367,8,24,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,376,8,25,1,25,1,25,3,25,380,8,
  	25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,388,8,26,1,26,1,26,3,26,392,8,26,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,401,8,27,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,3,28,410,8,28,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,
  	1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,
  	1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,
  	1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,
  	1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,
  	1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,
  	1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,
  	1,66,1,66,1,67,1,67,1,68,1,68,1,69,4,69,539,8,69,11,69,12,69,540,1,69,
  	1,69,4,69,545,8,69,11,69,12,69,546,3,69,549,8,69,1,70,4,70,552,8,70,11,
  	70,12,70,553,1,71,1,71,5,71,558,8,71,10,71,12,71,561,9,71,1,72,1,72,1,
  	72,5,72,566,8,72,10,72,12,72,569,9,72,1,72,1,72,1,73,1,73,1,73,1,73,3,
  	73,577,8,73,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,5,75,587,8,75,10,
  	75,12,75,590,9,75,1,75,3,75,593,8,75,1,75,1,75,1,75,1,75,1,76,1,76,1,
  	76,1,76,5,76,603,8,76,10,76,12,76,606,9,76,1,76,1,76,1,76,1,76,1,76,3,
  	567,588,604,0,77,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
  	23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
  	23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
  	69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
  	46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,
  	113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,
  	133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,74,149,75,151,76,
  	153,77,1,0,8,3,0,33,33,43,43,45,45,3,0,37,37,42,42,47,47,2,0,43,43,45,
  	45,2,0,60,60,62,62,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
  	95,97,122,3,0,9,10,13,13,32,32,652,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
  	0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
  	1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
  	0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
  	0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
  	1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
  	0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
  	0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
  	1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
  	0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,
  	0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,
  	0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,
  	0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,
  	0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,
  	0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,
  	0,153,1,0,0,0,1,157,1,0,0,0,3,159,1,0,0,0,5,174,1,0,0,0,7,176,1,0,0,0,
  	9,192,1,0,0,0,11,194,1,0,0,0,13,207,1,0,0,0,15,216,1,0,0,0,17,218,1,0,
  	0,0,19,228,1,0,0,0,21,230,1,0,0,0,23,233,1,0,0,0,25,241,1,0,0,0,27,252,
  	1,0,0,0,29,315,1,0,0,0,31,317,1,0,0,0,33,319,1,0,0,0,35,321,1,0,0,0,37,
  	332,1,0,0,0,39,336,1,0,0,0,41,347,1,0,0,0,43,349,1,0,0,0,45,351,1,0,0,
  	0,47,359,1,0,0,0,49,366,1,0,0,0,51,379,1,0,0,0,53,391,1,0,0,0,55,400,
  	1,0,0,0,57,409,1,0,0,0,59,411,1,0,0,0,61,413,1,0,0,0,63,417,1,0,0,0,65,
  	423,1,0,0,0,67,428,1,0,0,0,69,435,1,0,0,0,71,438,1,0,0,0,73,443,1,0,0,
  	0,75,446,1,0,0,0,77,452,1,0,0,0,79,456,1,0,0,0,81,462,1,0,0,0,83,471,
  	1,0,0,0,85,477,1,0,0,0,87,480,1,0,0,0,89,483,1,0,0,0,91,486,1,0,0,0,93,
  	489,1,0,0,0,95,492,1,0,0,0,97,495,1,0,0,0,99,497,1,0,0,0,101,499,1,0,
  	0,0,103,501,1,0,0,0,105,503,1,0,0,0,107,505,1,0,0,0,109,507,1,0,0,0,111,
  	509,1,0,0,0,113,511,1,0,0,0,115,513,1,0,0,0,117,515,1,0,0,0,119,517,1,
  	0,0,0,121,519,1,0,0,0,123,521,1,0,0,0,125,523,1,0,0,0,127,525,1,0,0,0,
  	129,527,1,0,0,0,131,529,1,0,0,0,133,531,1,0,0,0,135,533,1,0,0,0,137,535,
  	1,0,0,0,139,538,1,0,0,0,141,551,1,0,0,0,143,555,1,0,0,0,145,562,1,0,0,
  	0,147,576,1,0,0,0,149,578,1,0,0,0,151,582,1,0,0,0,153,598,1,0,0,0,155,
  	158,3,3,1,0,156,158,3,11,5,0,157,155,1,0,0,0,157,156,1,0,0,0,158,2,1,
  	0,0,0,159,160,5,99,0,0,160,161,5,111,0,0,161,162,5,110,0,0,162,163,5,
  	115,0,0,163,164,5,116,0,0,164,165,1,0,0,0,165,166,3,5,2,0,166,167,3,7,
  	3,0,167,168,5,44,0,0,168,169,3,7,3,0,169,170,1,0,0,0,170,171,5,59,0,0,
  	171,4,1,0,0,0,172,175,3,61,30,0,173,175,3,63,31,0,174,172,1,0,0,0,174,
  	173,1,0,0,0,175,6,1,0,0,0,176,177,3,143,71,0,177,178,5,91,0,0,178,179,
  	3,59,29,0,179,180,5,93,0,0,180,181,1,0,0,0,181,182,5,61,0,0,182,183,3,
  	9,4,0,183,8,1,0,0,0,184,193,3,59,29,0,185,186,5,123,0,0,186,187,3,9,4,
  	0,187,188,5,44,0,0,188,189,3,9,4,0,189,190,1,0,0,0,190,191,5,125,0,0,
  	191,193,1,0,0,0,192,184,1,0,0,0,192,185,1,0,0,0,193,10,1,0,0,0,194,195,
  	3,5,2,0,195,196,3,13,6,0,196,197,6,5,0,0,197,198,5,59,0,0,198,12,1,0,
  	0,0,199,200,3,143,71,0,200,201,6,6,1,0,201,208,1,0,0,0,202,203,3,143,
  	71,0,203,204,6,6,2,0,204,205,5,61,0,0,205,206,3,15,7,0,206,208,1,0,0,
  	0,207,199,1,0,0,0,207,202,1,0,0,0,208,14,1,0,0,0,209,217,3,31,15,0,210,
  	211,5,123,0,0,211,212,3,15,7,0,212,213,6,7,3,0,213,214,1,0,0,0,214,215,
  	5,125,0,0,215,217,1,0,0,0,216,209,1,0,0,0,216,210,1,0,0,0,217,16,1,0,
  	0,0,218,219,3,19,9,0,219,220,3,143,71,0,220,221,5,40,0,0,221,222,3,21,
  	10,0,222,223,5,41,0,0,223,224,3,25,12,0,224,18,1,0,0,0,225,229,3,65,32,
  	0,226,229,3,61,30,0,227,229,3,63,31,0,228,225,1,0,0,0,228,226,1,0,0,0,
  	228,227,1,0,0,0,229,20,1,0,0,0,230,231,3,23,11,0,231,232,6,10,4,0,232,
  	22,1,0,0,0,233,234,3,5,2,0,234,235,3,143,71,0,235,236,5,91,0,0,236,237,
  	5,93,0,0,237,238,5,91,0,0,238,239,3,31,15,0,239,240,5,93,0,0,240,24,1,
  	0,0,0,241,245,5,123,0,0,242,244,3,27,13,0,243,242,1,0,0,0,244,247,1,0,
  	0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,245,1,0,0,0,248,
  	249,5,125,0,0,249,26,1,0,0,0,250,253,3,1,0,0,251,253,3,29,14,0,252,250,
  	1,0,0,0,252,251,1,0,0,0,253,28,1,0,0,0,254,255,3,35,17,0,255,256,5,61,
  	0,0,256,257,3,31,15,0,257,258,5,59,0,0,258,316,1,0,0,0,259,260,3,31,15,
  	0,260,261,5,59,0,0,261,316,1,0,0,0,262,316,3,25,12,0,263,264,5,105,0,
  	0,264,265,5,102,0,0,265,266,1,0,0,0,266,267,5,40,0,0,267,268,3,33,16,
  	0,268,269,5,41,0,0,269,270,3,29,14,0,270,271,5,101,0,0,271,272,5,108,
  	0,0,272,273,5,115,0,0,273,274,5,101,0,0,274,275,1,0,0,0,275,276,3,29,
  	14,0,276,316,1,0,0,0,277,278,5,119,0,0,278,279,5,104,0,0,279,280,5,105,
  	0,0,280,281,5,108,0,0,281,282,5,101,0,0,282,283,1,0,0,0,283,284,5,40,
  	0,0,284,285,3,33,16,0,285,286,5,41,0,0,286,287,3,29,14,0,287,316,1,0,
  	0,0,288,289,5,98,0,0,289,290,5,114,0,0,290,291,5,101,0,0,291,292,5,97,
  	0,0,292,293,5,107,0,0,293,294,1,0,0,0,294,316,5,59,0,0,295,296,5,99,0,
  	0,296,297,5,111,0,0,297,298,5,110,0,0,298,299,5,116,0,0,299,300,5,105,
  	0,0,300,301,5,110,0,0,301,302,5,117,0,0,302,303,5,101,0,0,303,304,1,0,
  	0,0,304,316,5,59,0,0,305,306,5,114,0,0,306,307,5,101,0,0,307,308,5,116,
  	0,0,308,309,5,117,0,0,309,310,5,114,0,0,310,311,5,110,0,0,311,312,1,0,
  	0,0,312,313,3,31,15,0,313,314,5,59,0,0,314,316,1,0,0,0,315,254,1,0,0,
  	0,315,259,1,0,0,0,315,262,1,0,0,0,315,263,1,0,0,0,315,277,1,0,0,0,315,
  	288,1,0,0,0,315,295,1,0,0,0,315,305,1,0,0,0,316,30,1,0,0,0,317,318,3,
  	49,24,0,318,32,1,0,0,0,319,320,3,57,28,0,320,34,1,0,0,0,321,322,3,143,
  	71,0,322,323,5,91,0,0,323,324,3,31,15,0,324,325,5,93,0,0,325,36,1,0,0,
  	0,326,327,5,40,0,0,327,328,3,31,15,0,328,329,5,41,0,0,329,333,1,0,0,0,
  	330,333,3,35,17,0,331,333,3,39,19,0,332,326,1,0,0,0,332,330,1,0,0,0,332,
  	331,1,0,0,0,333,38,1,0,0,0,334,337,3,141,70,0,335,337,3,139,69,0,336,
  	334,1,0,0,0,336,335,1,0,0,0,337,40,1,0,0,0,338,348,3,37,18,0,339,340,
  	3,143,71,0,340,341,5,40,0,0,341,342,3,45,22,0,342,343,5,41,0,0,343,348,
  	1,0,0,0,344,345,3,43,21,0,345,346,3,41,20,0,346,348,1,0,0,0,347,338,1,
  	0,0,0,347,339,1,0,0,0,347,344,1,0,0,0,348,42,1,0,0,0,349,350,7,0,0,0,
  	350,44,1,0,0,0,351,352,3,31,15,0,352,353,6,22,5,0,353,46,1,0,0,0,354,
  	360,3,41,20,0,355,356,3,41,20,0,356,357,7,1,0,0,357,358,3,47,23,0,358,
  	360,1,0,0,0,359,354,1,0,0,0,359,355,1,0,0,0,360,48,1,0,0,0,361,367,3,
  	47,23,0,362,363,3,47,23,0,363,364,7,2,0,0,364,365,3,49,24,0,365,367,1,
  	0,0,0,366,361,1,0,0,0,366,362,1,0,0,0,367,50,1,0,0,0,368,380,3,49,24,
  	0,369,375,3,49,24,0,370,376,7,3,0,0,371,372,5,60,0,0,372,376,5,61,0,0,
  	373,374,5,62,0,0,374,376,5,61,0,0,375,370,1,0,0,0,375,371,1,0,0,0,375,
  	373,1,0,0,0,376,377,1,0,0,0,377,378,3,51,25,0,378,380,1,0,0,0,379,368,
  	1,0,0,0,379,369,1,0,0,0,380,52,1,0,0,0,381,392,3,51,25,0,382,387,3,51,
  	25,0,383,384,5,61,0,0,384,388,5,61,0,0,385,386,5,33,0,0,386,388,5,61,
  	0,0,387,383,1,0,0,0,387,385,1,0,0,0,388,389,1,0,0,0,389,390,3,53,26,0,
  	390,392,1,0,0,0,391,381,1,0,0,0,391,382,1,0,0,0,392,54,1,0,0,0,393,401,
  	3,53,26,0,394,395,3,53,26,0,395,396,5,38,0,0,396,397,5,38,0,0,397,398,
  	1,0,0,0,398,399,3,55,27,0,399,401,1,0,0,0,400,393,1,0,0,0,400,394,1,0,
  	0,0,401,56,1,0,0,0,402,410,3,55,27,0,403,404,3,55,27,0,404,405,5,124,
  	0,0,405,406,5,124,0,0,406,407,1,0,0,0,407,408,3,57,28,0,408,410,1,0,0,
  	0,409,402,1,0,0,0,409,403,1,0,0,0,410,58,1,0,0,0,411,412,3,49,24,0,412,
  	60,1,0,0,0,413,414,5,105,0,0,414,415,5,110,0,0,415,416,5,116,0,0,416,
  	62,1,0,0,0,417,418,5,102,0,0,418,419,5,108,0,0,419,420,5,111,0,0,420,
  	421,5,97,0,0,421,422,5,116,0,0,422,64,1,0,0,0,423,424,5,118,0,0,424,425,
  	5,111,0,0,425,426,5,105,0,0,426,427,5,100,0,0,427,66,1,0,0,0,428,429,
  	5,114,0,0,429,430,5,101,0,0,430,431,5,116,0,0,431,432,5,117,0,0,432,433,
  	5,114,0,0,433,434,5,110,0,0,434,68,1,0,0,0,435,436,5,105,0,0,436,437,
  	5,102,0,0,437,70,1,0,0,0,438,439,5,101,0,0,439,440,5,108,0,0,440,441,
  	5,115,0,0,441,442,5,101,0,0,442,72,1,0,0,0,443,444,5,100,0,0,444,445,
  	5,111,0,0,445,74,1,0,0,0,446,447,5,119,0,0,447,448,5,104,0,0,448,449,
  	5,105,0,0,449,450,5,108,0,0,450,451,5,101,0,0,451,76,1,0,0,0,452,453,
  	5,102,0,0,453,454,5,111,0,0,454,455,5,114,0,0,455,78,1,0,0,0,456,457,
  	5,98,0,0,457,458,5,114,0,0,458,459,5,101,0,0,459,460,5,97,0,0,460,461,
  	5,107,0,0,461,80,1,0,0,0,462,463,5,99,0,0,463,464,5,111,0,0,464,465,5,
  	110,0,0,465,466,5,116,0,0,466,467,5,105,0,0,467,468,5,110,0,0,468,469,
  	5,117,0,0,469,470,5,101,0,0,470,82,1,0,0,0,471,472,5,99,0,0,472,473,5,
  	111,0,0,473,474,5,110,0,0,474,475,5,115,0,0,475,476,5,116,0,0,476,84,
  	1,0,0,0,477,478,5,61,0,0,478,479,5,61,0,0,479,86,1,0,0,0,480,481,5,33,
  	0,0,481,482,5,61,0,0,482,88,1,0,0,0,483,484,5,38,0,0,484,485,5,38,0,0,
  	485,90,1,0,0,0,486,487,5,124,0,0,487,488,5,124,0,0,488,92,1,0,0,0,489,
  	490,5,60,0,0,490,491,5,61,0,0,491,94,1,0,0,0,492,493,5,62,0,0,493,494,
  	5,61,0,0,494,96,1,0,0,0,495,496,5,43,0,0,496,98,1,0,0,0,497,498,5,45,
  	0,0,498,100,1,0,0,0,499,500,5,42,0,0,500,102,1,0,0,0,501,502,5,47,0,0,
  	502,104,1,0,0,0,503,504,5,37,0,0,504,106,1,0,0,0,505,506,5,60,0,0,506,
  	108,1,0,0,0,507,508,5,62,0,0,508,110,1,0,0,0,509,510,5,58,0,0,510,112,
  	1,0,0,0,511,512,5,59,0,0,512,114,1,0,0,0,513,514,5,33,0,0,514,116,1,0,
  	0,0,515,516,5,126,0,0,516,118,1,0,0,0,517,518,5,44,0,0,518,120,1,0,0,
  	0,519,520,5,46,0,0,520,122,1,0,0,0,521,522,5,61,0,0,522,124,1,0,0,0,523,
  	524,5,63,0,0,524,126,1,0,0,0,525,526,5,40,0,0,526,128,1,0,0,0,527,528,
  	5,41,0,0,528,130,1,0,0,0,529,530,5,91,0,0,530,132,1,0,0,0,531,532,5,93,
  	0,0,532,134,1,0,0,0,533,534,5,123,0,0,534,136,1,0,0,0,535,536,5,125,0,
  	0,536,138,1,0,0,0,537,539,7,4,0,0,538,537,1,0,0,0,539,540,1,0,0,0,540,
  	538,1,0,0,0,540,541,1,0,0,0,541,548,1,0,0,0,542,544,9,0,0,0,543,545,7,
  	4,0,0,544,543,1,0,0,0,545,546,1,0,0,0,546,544,1,0,0,0,546,547,1,0,0,0,
  	547,549,1,0,0,0,548,542,1,0,0,0,548,549,1,0,0,0,549,140,1,0,0,0,550,552,
  	7,4,0,0,551,550,1,0,0,0,552,553,1,0,0,0,553,551,1,0,0,0,553,554,1,0,0,
  	0,554,142,1,0,0,0,555,559,7,5,0,0,556,558,7,6,0,0,557,556,1,0,0,0,558,
  	561,1,0,0,0,559,557,1,0,0,0,559,560,1,0,0,0,560,144,1,0,0,0,561,559,1,
  	0,0,0,562,567,5,34,0,0,563,566,3,147,73,0,564,566,9,0,0,0,565,563,1,0,
  	0,0,565,564,1,0,0,0,566,569,1,0,0,0,567,568,1,0,0,0,567,565,1,0,0,0,568,
  	570,1,0,0,0,569,567,1,0,0,0,570,571,5,34,0,0,571,146,1,0,0,0,572,573,
  	5,92,0,0,573,577,5,34,0,0,574,575,5,92,0,0,575,577,5,92,0,0,576,572,1,
  	0,0,0,576,574,1,0,0,0,577,148,1,0,0,0,578,579,7,7,0,0,579,580,1,0,0,0,
  	580,581,6,74,6,0,581,150,1,0,0,0,582,583,5,47,0,0,583,584,5,47,0,0,584,
  	588,1,0,0,0,585,587,9,0,0,0,586,585,1,0,0,0,587,590,1,0,0,0,588,589,1,
  	0,0,0,588,586,1,0,0,0,589,592,1,0,0,0,590,588,1,0,0,0,591,593,5,13,0,
  	0,592,591,1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,595,5,10,0,0,595,
  	596,1,0,0,0,596,597,6,75,6,0,597,152,1,0,0,0,598,599,5,47,0,0,599,600,
  	5,42,0,0,600,604,1,0,0,0,601,603,9,0,0,0,602,601,1,0,0,0,603,606,1,0,
  	0,0,604,605,1,0,0,0,604,602,1,0,0,0,605,607,1,0,0,0,606,604,1,0,0,0,607,
  	608,5,42,0,0,608,609,5,47,0,0,609,610,1,0,0,0,610,611,6,76,6,0,611,154,
  	1,0,0,0,32,0,157,174,192,207,216,228,245,252,315,332,336,347,359,366,
  	375,379,387,391,400,409,540,546,548,553,559,565,567,576,588,592,604,7,
  	1,5,0,1,6,1,1,6,2,1,7,3,1,10,4,1,22,5,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysylexerLexerStaticData = staticData.release();
}

}

SysYLexer::SysYLexer(CharStream *input) : Lexer(input) {
  SysYLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *sysylexerLexerStaticData->atn, sysylexerLexerStaticData->decisionToDFA, sysylexerLexerStaticData->sharedContextCache);
}

SysYLexer::~SysYLexer() {
  delete _interpreter;
}

std::string SysYLexer::getGrammarFileName() const {
  return "SysY.g4";
}

const std::vector<std::string>& SysYLexer::getRuleNames() const {
  return sysylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SysYLexer::getChannelNames() const {
  return sysylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SysYLexer::getModeNames() const {
  return sysylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SysYLexer::getVocabulary() const {
  return sysylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SysYLexer::getSerializedATN() const {
  return sysylexerLexerStaticData->serializedATN;
}

const atn::ATN& SysYLexer::getATN() const {
  return *sysylexerLexerStaticData->atn;
}


void SysYLexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 5: VarDeclAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 6: VarDefAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 7: InitValAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 10: FuncFParamsAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 22: FuncRParamsAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

void SysYLexer::VarDeclAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0:  ',' VarDef  break;

  default:
    break;
  }
}

void SysYLexer::VarDefAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1:  '[' ConstExp ']'  break;
    case 2:  '[' ConstExp ']'  break;

  default:
    break;
  }
}

void SysYLexer::InitValAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 3:  ',' InitVal  break;

  default:
    break;
  }
}

void SysYLexer::FuncFParamsAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 4:  ',' FuncFParam  break;

  default:
    break;
  }
}

void SysYLexer::FuncRParamsAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 5:  ',' Exp  break;

  default:
    break;
  }
}



void SysYLexer::initialize() {
  std::call_once(sysylexerLexerOnceFlag, sysylexerLexerInitialize);
}
